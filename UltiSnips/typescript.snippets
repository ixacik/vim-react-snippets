# ==========================================
# React Snippets
#
snippet rfc "react functional component" b
export default function($1) {
	return ($2)
}
endsnippet

snippet rnfc "react native functional component" b
import { View } from 'react-native'

export default function($1) {
	return (<View>$2</View>)
}
endsnippet

snippet rnfcs "react native functional component with stylesheet" b
import { View, StyleSheet } from 'react-native'

export default function($1) {
	return (<View>$2</View>)
}

const styles = StyleSheet.create({$3})
endsnippet

# ==========================================
# Hooks and effects
#

snippet useS "useState()" b
const [$1, set`!p snip.rv=upperfirst(t[1])`] = useState$3($2)$0
endsnippet

snippet useE "useEffect()" b
useEffect(() => {
	$0
}, [])
endsnippet

snippet useEA "useEffect() async" b
useEffect(() => {
	let cancelled = false

	;(async function ${3:doWork}(): Promise<${4:void}> {
		${1:// async work here}
		if (cancelled) {
			return
		}

		$2
	})()

	return () => {
		cancelled = true
	}
}, [])
endsnippet

snippet useC "useContext()" b
const ${1:context} = useContext($2)$0
endsnippet

snippet useRed "useReducer(reducer, initialState, getInitialState)" b
const [${4:state}, ${5:dispatch}] = useReducer(function reducer(state: $1, action: $2): $1 {
	return state
}, ${3:null})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback(($2) => {
	$0
}, [])
endsnippet

snippet useM "useMemo" b
const ${1:memoized} = useMemo(() => ({
	$0
}), [])
endsnippet

snippet useMR "useMemo return)" b
const ${1:memoized} = useMemo(() => {
	$0
}, [])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef$3(${2:null})$0
endsnippet

snippet useI "useImperativeHandle(ref, createHandle, [inputs])" b
useImperativeHandle(${1:ref}, () => ({
	$0
}), [])
endsnippet

snippet useL "useLayoutEffect()" b
useLayoutEffect(() => {
	$0
}, [])
endsnippet

snippet useDV "useDebugValue(value)" b
useDebugValue(${1:null})
endsnippet

snippet useT "useTransition" b
const [${1:isPending}, ${2:startTransition}] = useTransition()
endsnippet
